/* using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Three_Integer
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the array size:");
            int n = int.Parse(Console.ReadLine());
            int[] nums = new int[n];
            Console.WriteLine("Enter the array elements:");
            for (int i = 0; i < n; i++)
            {
                nums[i] = int.Parse(Console.ReadLine());
            }
            
           

            //Console.WriteLine("The output is:");
           bool notexist = false;

            for (int i = 0; i < n - 2; i++)
            {
                for (int j = i + 1; j < n - 1; j++)
                {
                    for (int k = j + 1; k < n; k++)
                    {

                        if (nums[i] + nums[j] + nums[k] == 0)
                        {
                         notexist = true;
                         Console.WriteLine("[" + nums[i] + "," + nums[j] + "," + nums[k] + "]");
                           
                              
                        }


                    }
                    }
            }

            if (notexist==false)
            {
                Console.WriteLine("[]");
            }
            Console.ReadLine();
        }
       

        }
              
        }*/



using System;
using System.Collections.Generic;

public class Solution
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Enter the array size:");
        int n = int.Parse(Console.ReadLine());
        int[] nums = new int[n];

        Console.WriteLine("Enter the array elements:");
        for (int i = 0; i < n; i++)
        {
            nums[i] = int.Parse(Console.ReadLine());
        }

        Solution solution = new Solution();//object creation
        IList<IList<int>> triplets = solution.ThreeSum(nums);//list of lists...inner list is a triplet = 0.
        //resulting list of triplets is assigned to the triplets
        Console.WriteLine("Triplets that sum to 0:");
        foreach (var triplet in triplets)//refers triplet in triplets variable.
        {
            Console.WriteLine($"[{string.Join(", ", triplet)}]");//list into a single string
        }
    }

    public IList<IList<int>> ThreeSum(int[] nums)
    {
        var result = new List<IList<int>>(); //hold resulting triplets.
        var seenTriplets = new HashSet<string>();//track of unique triplets added to the list.

        for (int i = 0; i < nums.Length - 2; i++)//-1:  at least two more elements after the current i to form a triplet.
        {
            var seen = new HashSet<int>(); //track numbers in inner loop
            for (int j = i + 1; j < nums.Length; j++)//0
            {
                int complement = -nums[i] - nums[j];// -(-1) - 0 = 1....1 is added to seen 
                if (seen.Contains(complement))//complement of two numbers has already encountered in the current iteration of the loop.
                {
                    var triplet = new List<int> { nums[i], nums[j], complement };//creating a triplet{-1,0,1}
                    triplet.Sort(); //will sort:[-1, 1, 0]

                    string tripletKey = string.Join(",", triplet);// -1,0,1
                    if (!seenTriplets.Contains(tripletKey))
                    {
                        result.Add(triplet);//[[-1, 0, 1]]  adding to result list
                        seenTriplets.Add(tripletKey);//{"-1,0,1"}
                    }
                }
                seen.Add(nums[j]);//ensure every number in inner loop is stored
                
            }
        }
        Console.ReadLine();

        return result;
       
    }
}
